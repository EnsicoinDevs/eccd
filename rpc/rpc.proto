syntax = "proto3";

package rpc;

service Node {
  rpc GetBlock (GetBlockRequest) returns (GetBlockReply) {}
  rpc GetBestBlockHash (GetBestBlockHashRequest) returns (GetBestBlockHashReply) {}
  rpc PublishTx (PublishTxRequest) returns (PublishTxReply) {}
  rpc PublishBlock (PublishBlockRequest) returns (PublishBlockReply) {}
  rpc ListenIncomingTxs (ListenIncomingTxsRequest) returns (stream TxWithBlock) {}
  rpc GetBlockTemplate (GetBlockTemplateRequest) returns (stream GetBlockTemplateReply) {}
}

message Error {
  uint32 code = 1;
}

message Block {
  string hash = 1;
  uint32 version = 2;
  repeated string flags = 3;
  string hashPrevBlock = 4;
  string hashMerkleRoot = 5;
  int64 timestamp = 6;
  uint32 height = 7;
  uint32 bits = 8;
  uint64 nonce = 9;
  repeated Tx txs = 10;
}

message BlockTemplate {
  uint32 version = 1;
  repeated string flags = 2;
  bytes prev_block = 3;
  uint64 timestamp = 4;
  uint32 height = 5;
  uint32 target = 6;
}

message Tx {
  string hash = 1;
  uint32 version = 2;
  repeated string flags = 3;
  repeated Input inputs = 4;
  repeated Output outputs = 5;
}

message Input {
  Outpoint previousOutput = 1;
  bytes script = 2;
}

message Outpoint {
  string hash = 1;
  uint32 index = 2;
}

message Output {
  uint64 value = 1;
  bytes script = 2;
}

message GetBlockRequest {
  string hash = 1;
}

message GetBlockReply {
  Block block = 1;
}

message GetBestBlockHashRequest {}

message GetBestBlockHashReply {
  string hash = 1;
}

message PublishTxRequest {
  bytes tx = 1;
}

message PublishTxReply {
  Error error = 1;
  string hash = 2;
}

message PublishBlockRequest {
  bytes block = 1;
}

message PublishBlockReply {
  string hash = 1;
}

message GetBlockTemplateRequest {

}

message GetBlockTemplateReply {
  BlockTemplate template = 1;
}

message ListenIncomingTxsRequest {
}

message TxWithBlock {
  Tx tx = 1;
  Block block = 2;
}
